--- origsrc/commons-compress-1.4.1-src/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	2012-05-21 23:49:20.000000000 -0500
+++ src/commons-compress-1.4.1-src/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	2012-08-29 17:34:41.624225300 -0500
@@ -28,8 +28,6 @@ import org.apache.commons.compress.compr
 import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
 import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
 import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
-import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
-import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;
 
 /**
  * <p>Factory to create Compressor[In|Out]putStreams from names. To add other
@@ -70,11 +68,6 @@ public class CompressorStreamFactory {
      * @since Commons Compress 1.1
      */
     public static final String GZIP = "gz";
-    /**
-     * Constant used to identify the PACK200 compression algorithm.
-     * @since Commons Compress 1.3
-     */
-    public static final String PACK200 = "pack200";
 
     /**
      * Constant used to identify the XZ compression method.
@@ -121,10 +114,6 @@ public class CompressorStreamFactory {
                 return new XZCompressorInputStream(in);
             }
 
-            if (Pack200CompressorInputStream.matches(signature, signatureLength)) {
-                return new Pack200CompressorInputStream(in);
-            }
-
         } catch (IOException e) {
             throw new CompressorException("Failed to detect Compressor from InputStream.", e);
         }
@@ -162,10 +151,6 @@ public class CompressorStreamFactory {
                 return new XZCompressorInputStream(in);
             }
 
-            if (PACK200.equalsIgnoreCase(name)) {
-                return new Pack200CompressorInputStream(in);
-            }
-
         } catch (IOException e) {
             throw new CompressorException(
                     "Could not create CompressorInputStream.", e);
@@ -204,10 +189,6 @@ public class CompressorStreamFactory {
                 return new XZCompressorOutputStream(out);
             }
 
-            if (PACK200.equalsIgnoreCase(name)) {
-                return new Pack200CompressorOutputStream(out);
-            }
-
         } catch (IOException e) {
             throw new CompressorException(
                     "Could not create CompressorOutputStream", e);
